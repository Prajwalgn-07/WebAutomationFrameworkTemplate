

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "io.qameta.allure" version "2.8.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    jcenter()
}

configurations {
    testCompile
}

dependencies {
    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:7.4.0'
    //Selenium
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.1.1'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.0.3'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    // lombok
    implementation('org.projectlombok:lombok:1.18.20')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    testImplementation('org.projectlombok:lombok:1.18.20')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.20')
    //javaFaker
    implementation 'com.github.javafaker:javafaker:1.0.2'
    //Gson
    implementation 'com.google.code.gson:gson:2.8.9'
    //Assertj
    testImplementation("org.assertj:assertj-core:3.22.0")
    //allure
    implementation('io.qameta.allure:allure-gradle:2.8.1')
    implementation('io.qameta.allure:allure-java-commons:2.14.0')
    implementation('io.qameta.allure:allure-testng:2.14.0')
    implementation 'org.aspectj:aspectjweaver:1.9.8.RC3'
}


tasks.named('test') {
    useTestNG()
}

tasks.withType(Test) {
    systemProperties System.properties
}

task runWebTests(type: Test) {
    outputs.upToDateWhen { false }
    useTestNG {
        useDefaultListeners true
        outputDirectory = file("$buildDir/web-reports")
    }
}
allure {
    version = '2.13.2'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.13.2'
    reportDir = new File(project.projectDir as File, '/allure-report/ui')
    resultsDir = new File(project.projectDir as File, '/allure-report/results')
    clean = true
}


task createReportDir() {
    doLast {
        def file = new File(project.projectDir as File, '/allure-report/ui')
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}

task saveHistory(type: Copy) {
    from new File(project.projectDir as File, '/allure-report/ui/history')
    into new File(project.projectDir as File, '/allure-report/results/history')
}


clean {
    if (!System.getenv('CI')) {
        delete "$projectDir/allure-report"
        delete "$projectDir/allure-results"
    }
}

// Execution Rules
tasks.runWebTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.build.mustRunAfter 'clean'
tasks.runWebTests.finalizedBy('allureReport')
